{"version":3,"file":"public/css/buildamic.css","mappings":"AAAA,+2IACA,qSACA,8+SCFA,WAGE,iBADA,kBAEA,kBACA,mBAJA,SDiBF,CEsEI,0BDxFJ,WAOI,eACA,eDeF,CACF,CEgEI,0BDxFJ,WAWI,gBDiBF,CACF,CCdA,0BACE,WACE,gBDiBF,CACF,CCfA,mBACE,eACA,iBDiBF,CEiDI,yBDpEJ,mBAII,cDmBF,CACF,CCjBA,eAEE,aACA,sBACA,wBAHA,cDuBF,CEqCI,yBD7DJ,eAMI,aAIA,mCAHA,sDACA,+CACA,cDuBF,CACF,CE4BI,0BD7DJ,eAaI,kDDwBF,CACF,CEuBI,0BD7DJ,eAgBI,kED0BF,CACF,CCpBA,gCAEE,cDuBF,CCtBE,4DACE,aDyBJ,CCvBE,0DACE,gBD0BJ,CCtBA,8BACE,eDyBF,CECI,yBDvBJ,kBAEI,SDyBF,CACF,CClBM,OACE,uBDqBR,CCtBM,OACE,uBDyBR,CC1BM,OACE,uBD6BR,CC9BM,OACE,uBDiCR,CClCM,OACE,uBDqCR,CCtCM,OACE,uBDyCR,CC1CM,OACE,uBD6CR,CC9CM,OACE,uBDiDR,CClDM,OACE,uBDqDR,CCtDM,OACE,uBDyDR,CC1DM,QACE,wBD6DR,CC9DM,QACE,wBDiER,CClEM,QACE,wBDqER,CEzDI,yBDNI,WACE,uBDmER,CCpEM,WACE,uBDsER,CCvEM,WACE,uBDyER,CC1EM,WACE,uBD4ER,CC7EM,WACE,uBD+ER,CChFM,WACE,uBDkFR,CCnFM,WACE,uBDqFR,CCtFM,WACE,uBDwFR,CCzFM,WACE,uBD2FR,CC5FM,WACE,uBD8FR,CC/FM,YACE,wBDiGR,CClGM,YACE,wBDoGR,CCrGM,YACE,wBDuGR,CACF,CEnGI,yBDNI,WACE,uBD4GR,CC7GM,WACE,uBD+GR,CChHM,WACE,uBDkHR,CCnHM,WACE,uBDqHR,CCtHM,WACE,uBDwHR,CCzHM,WACE,uBD2HR,CC5HM,WACE,uBD8HR,CC/HM,WACE,uBDiIR,CClIM,WACE,uBDoIR,CCrIM,WACE,uBDuIR,CCxIM,YACE,wBD0IR,CC3IM,YACE,wBD6IR,CC9IM,YACE,wBDgJR,CACF,CE5II,0BDNI,WACE,uBDqJR,CCtJM,WACE,uBDwJR,CCzJM,WACE,uBD2JR,CC5JM,WACE,uBD8JR,CC/JM,WACE,uBDiKR,CClKM,WACE,uBDoKR,CCrKM,WACE,uBDuKR,CCxKM,WACE,uBD0KR,CC3KM,WACE,uBD6KR,CC9KM,WACE,uBDgLR,CCjLM,YACE,wBDmLR,CCpLM,YACE,wBDsLR,CCvLM,YACE,wBDyLR,CACF,CErLI,0BDNI,WACE,uBD8LR,CC/LM,WACE,uBDiMR,CClMM,WACE,uBDoMR,CCrMM,WACE,uBDuMR,CCxMM,WACE,uBD0MR,CC3MM,WACE,uBD6MR,CC9MM,WACE,uBDgNR,CCjNM,WACE,uBDmNR,CCpNM,WACE,uBDsNR,CCvNM,WACE,uBDyNR,CC1NM,YACE,wBD4NR,CC7NM,YACE,wBD+NR,CChOM,YACE,wBDkOR,CACF,CE9NI,0BDNI,YACE,uBDuOR,CCxOM,YACE,uBD0OR,CC3OM,YACE,uBD6OR,CC9OM,YACE,uBDgPR,CCjPM,YACE,uBDmPR,CCpPM,YACE,uBDsPR,CCvPM,YACE,uBDyPR,CC1PM,YACE,uBD4PR,CC7PM,YACE,uBD+PR,CChQM,YACE,uBDkQR,CCnQM,aACE,wBDqQR,CCtQM,aACE,wBDwQR,CCzQM,aACE,wBD2QR,CACF,CCrQA,MACE,uBDuQF,CGlWA,oBACE,kBAKA,YAFA,OAIA,qCANA,kBACA,MAEA,WAEA,UHsWF,CA9VA,MACE,qBAiWF,CA5VE,+BACE,0BA+VJ,CA5VE,yCACE,0BACA,sBACA,SA8VJ,CA7VI,+HAGE,cADA,cAgWN,CA7VI,yDACE,mCA+VN,CA3VE,oCAME,iCACA,0DACA,4BACA,4BAJA,iCADA,YAFA,YADA,UAqWJ,CErTI,yBFpCA,+BACE,6BA4VJ,CACF,CAlZA,qFIAA,sCJAA,WIAA,C","sources":["webpack:///./resources/sass/buildamic.scss","webpack:///./resources/sass/buildy/_grid.scss","webpack:///./resources/sass/mixins/_breakpoints.scss","webpack:///./resources/sass/buildy/components/_background-videos.scss","webpack:///<no source>"],"sourcesContent":["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/*--------------------------------------------------------------\n# Functions, Variables, Mixins: (these should always come first)\n--------------------------------------------------------------*/\n@import \"mixins/mixins-master\";\n@import \"vendor/rfs\";\n\n/*--------------------------------------------------------------\n# Buildy: (All buildy defaults)\n--------------------------------------------------------------*/\n@import \"buildy/buildy\";\n\n:root {\n  --default-spacer: 1rem;\n}\n\n[class*=\"buildamic\"] {\n  // Fix instruction label spacing\n  .help-block {\n    margin-top: 0.1rem !important;\n  }\n\n  .replicator-fieldtype {\n    background: none !important;\n    border: none !important;\n    padding: 0;\n    .field-inner,\n    .replicator-fieldtype-container {\n      padding-left: 0;\n      margin-left: 0;\n    }\n    .replicator-set {\n      margin-bottom: var(--default-spacer);\n    }\n  }\n\n  .sortable-handle {\n    width: 1rem;\n    padding: 8px;\n    cursor: -webkit-grab;\n    cursor: grab;\n    border: 1px solid rgba(0, 0, 0, 0.06);\n    background-color: rgba(0, 0, 0, 0.03);\n    background-image: url(\"/vendor/buildamic/img/drag-dots.svg\");\n    background-position: 50% 50%;\n    background-repeat: no-repeat;\n  }\n\n  @include media-breakpoint-up(md) {\n    .form-group {\n      padding: var(--default-spacer);\n    }\n  }\n}\n",".container {\n  width: 90%;\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 2rem;\n  padding-right: 2rem;\n  @include media-breakpoint-up(lg) {\n    padding-left: 0;\n    padding-right: 0;\n  }\n  @include media-breakpoint-up(xl) {\n    max-width: $containerWidth;\n  }\n}\n\n@media (min-width: 2000px) {\n  .container {\n    max-width: $containerWidth;\n  }\n}\n.buildamic-section {\n  padding: 1rem 0;\n  position: relative;\n  @include media-breakpoint-up(md) {\n    padding: 3rem 0;\n  }\n}\n.buildamic-row {\n  padding: 1rem 0;\n  display: flex;\n  flex-direction: column;\n  gap: var(--col-gap, 3rem);\n  @include media-breakpoint-up(md) {\n    display: grid;\n    grid-template-columns: repeat(var(--b-columns, 12), 1fr);\n    grid-template-rows: repeat(var(--b-rows, 1), 1fr);\n    padding: 2rem 0;\n    gap: var(--gap-x-md, var(--col-gap));\n  }\n  @include media-breakpoint-up(lg) {\n    gap: var(--gap-x-lg, var(--gap-x-md, var(--col-gap)));\n  }\n  @include media-breakpoint-up(xl) {\n    gap: var(\n      --gap-x-xl,\n      var(--gap-x-lg, var(--gap-x-md, var(--col-gap)))\n    );\n  }\n}\n\n.buildamic-field,\n.buildamic-set {\n  padding: 1rem 0;\n  &:first-of-type {\n    padding-top: 0;\n  }\n  &:last-of-type {\n    padding-bottom: 0;\n  }\n}\n\n.buildamic-field p:last-child {\n  margin-bottom: 0;\n}\n\n.buildamic-column {\n  @include media-breakpoint-up(md) {\n    padding: 0;\n  }\n}\n\n@each $name, $breakpoint in $grid-breakpoints {\n  // Don't generate XS, instead have no prefix eg .mb-2\n  @if $name == xs {\n    @for $i from 0 through 12 {\n      .col-#{$i} {\n        grid-column: auto/span $i;\n      }\n    }\n  } @else {\n    @include media-breakpoint-up($name) {\n      @for $i from 0 through 12 {\n        .#{$name}\\:col-#{$i} {\n          grid-column: auto/span $i;\n        }\n      }\n    }\n  }\n}\n\n.grid {\n  gap: var(--col-gap, 1rem);\n}\n","$containerWidth: 1280px;\n\n$grid-breakpoints: (\n  xs: 0,\n  sm: 640px,\n  md: 768px,\n  lg: 1024px,\n  xl: $containerWidth,\n  xxl: 1536px,\n) !default;\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if(\n    $n < length($breakpoint-names),\n    nth($breakpoint-names, $n + 1),\n    null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @if $name and not $min {\n    $min: $name;\n  }\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @if $name and not $max {\n    $max: $name;\n  }\n  @return if($max and $max > 0, $max - 0.02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"#{$name}\\\\:\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between(\n  $lower,\n  $upper,\n  $breakpoints: $grid-breakpoints\n) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max(breakpoint-next($name, $breakpoints));\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n",".buildamic-bg-video {\n  aspect-ratio: 16/9;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  object-fit: cover;\n}\n"],"names":[],"sourceRoot":""}