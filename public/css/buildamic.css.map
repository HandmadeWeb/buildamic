{"version":3,"sources":["webpack:///./buildy/_grid.scss","webpack:///./buildamic.scss","webpack:///./mixins/_breakpoints.scss","webpack:///./mixins/_mixins-master.scss"],"names":[],"mappings":"AAmHA,WACE,UACA,kBACA,iBACA,kBACA,kBCzGF,CCwEI,0BF4BJ,WAOI,eACA,eCvGF,CACF,CCkEI,0BF4BJ,WAWI,gBCrGF,CACF,CDwGA,0BACE,WACE,gBCrGF,CACF,CDuGA,mBACE,cCrGF,CCoDI,yBFgDJ,mBAGI,cCnGF,CACF,CDqGA,eACE,aACA,8BACA,eACA,cClGF,CCwCI,yBFsDJ,eAMI,cChGF,CACF,CDmGA,mCAEE,cChGF,CDiGE,+DACE,aC9FJ,CDgGE,6DACE,gBC7FJ,CCsBI,yBF2EJ,kBAEI,SC9FF,CACF,CDiGA,YACE,eACA,aC9FF,CDgGA,2CAEE,gBACA,cC7FF,CDgGA,kBACE,UC7FF,CCCI,yBFgIE,SACE,aACA,YACA,cC7HN,CD+HI,cACE,cACA,WACA,cC5HN,CDgIM,WAMI,qCACA,mCChIV,CDyHM,sBAII,YACA,aCvHV,CDkHM,WAMI,2CACA,yCCzHV,CDkHM,WAMI,4CACA,0CClHV,CD2GM,sBAII,YACA,aCzGV,CDoGM,WAMI,sCACA,oCC3GV,CDoGM,WAMI,4CACA,0CCpGV,CD6FM,sBAII,YACA,aC3FV,CDsFM,WAMI,4CACA,0CC7FV,CDsFM,WAMI,sCACA,oCCtFV,CD+EM,sBAII,YACA,aC7EV,CDwEM,WAMI,4CACA,0CC/EV,CDwEM,WAMI,4CACA,0CCxEV,CDiEM,sBAII,YACA,aC/DV,CD0DM,WAMI,sCACA,oCCjEV,CD0DM,YAMI,4CACA,0CC1DV,CDmDM,wBAII,YACA,aCjDV,CD4CM,YAMI,4CACA,0CCnDV,CD4CM,YAEI,aC1CV,CDoDM,WGvLN,mCFuIA,CDgDM,WGvLN,mCF2IA,CD4CM,WGvLN,mCF+IA,CDwCM,WGvLN,mCFmJA,CDoCM,WGvLN,mCFuJA,CDgCM,WGvLN,mCF2JA,CD4BM,WGvLN,mCF+JA,CACF,CCjII,yBFgIE,SACE,aACA,YACA,cCIN,CDFI,cACE,cACA,WACA,cCKN,CDDM,WAMI,qCACA,mCCCV,CDRM,sBAII,YACA,aCUV,CDfM,WAMI,2CACA,yCCQV,CDfM,WAMI,4CACA,0CCeV,CDtBM,sBAII,YACA,aCwBV,CD7BM,WAMI,sCACA,oCCsBV,CD7BM,WAMI,4CACA,0CC6BV,CDpCM,sBAII,YACA,aCsCV,CD3CM,WAMI,4CACA,0CCoCV,CD3CM,WAMI,sCACA,oCC2CV,CDlDM,sBAII,YACA,aCoDV,CDzDM,WAMI,4CACA,0CCkDV,CDzDM,WAMI,4CACA,0CCyDV,CDhEM,sBAII,YACA,aCkEV,CDvEM,WAMI,sCACA,oCCgEV,CDvEM,YAMI,4CACA,0CCuEV,CD9EM,wBAII,YACA,aCgFV,CDrFM,YAMI,4CACA,0CC8EV,CDrFM,YAEI,aCuFV,CD7EM,WGvLN,mCFwQA,CDjFM,WGvLN,mCF4QA,CDrFM,WGvLN,mCFgRA,CDzFM,WGvLN,mCFoRA,CD7FM,WGvLN,mCFwRA,CDjGM,WGvLN,mCF4RA,CDrGM,WGvLN,mCFgSA,CACF,CClQI,0BFgIE,SACE,aACA,YACA,cCqIN,CDnII,cACE,cACA,WACA,cCsIN,CDlIM,WAMI,qCACA,mCCkIV,CDzIM,sBAII,YACA,aC2IV,CDhJM,WAMI,2CACA,yCCyIV,CDhJM,WAMI,4CACA,0CCgJV,CDvJM,sBAII,YACA,aCyJV,CD9JM,WAMI,sCACA,oCCuJV,CD9JM,WAMI,4CACA,0CC8JV,CDrKM,sBAII,YACA,aCuKV,CD5KM,WAMI,4CACA,0CCqKV,CD5KM,WAMI,sCACA,oCC4KV,CDnLM,sBAII,YACA,aCqLV,CD1LM,WAMI,4CACA,0CCmLV,CD1LM,WAMI,4CACA,0CC0LV,CDjMM,sBAII,YACA,aCmMV,CDxMM,WAMI,sCACA,oCCiMV,CDxMM,YAMI,4CACA,0CCwMV,CD/MM,wBAII,YACA,aCiNV,CDtNM,YAMI,4CACA,0CC+MV,CDtNM,YAEI,aCwNV,CD9MM,WGvLN,mCFyYA,CDlNM,WGvLN,mCF6YA,CDtNM,WGvLN,mCFiZA,CD1NM,WGvLN,mCFqZA,CD9NM,WGvLN,mCFyZA,CDlOM,WGvLN,mCF6ZA,CDtOM,WGvLN,mCFiaA,CACF,CCnYI,0BFgIE,SACE,aACA,YACA,cCsQN,CDpQI,cACE,cACA,WACA,cCuQN,CDnQM,WAMI,qCACA,mCCmQV,CD1QM,sBAII,YACA,aC4QV,CDjRM,WAMI,2CACA,yCC0QV,CDjRM,WAMI,4CACA,0CCiRV,CDxRM,sBAII,YACA,aC0RV,CD/RM,WAMI,sCACA,oCCwRV,CD/RM,WAMI,4CACA,0CC+RV,CDtSM,sBAII,YACA,aCwSV,CD7SM,WAMI,4CACA,0CCsSV,CD7SM,WAMI,sCACA,oCC6SV,CDpTM,sBAII,YACA,aCsTV,CD3TM,WAMI,4CACA,0CCoTV,CD3TM,WAMI,4CACA,0CC2TV,CDlUM,sBAII,YACA,aCoUV,CDzUM,WAMI,sCACA,oCCkUV,CDzUM,YAMI,4CACA,0CCyUV,CDhVM,wBAII,YACA,aCkVV,CDvVM,YAMI,4CACA,0CCgVV,CDvVM,YAEI,aCyVV,CD/UM,WGvLN,mCF0gBA,CDnVM,WGvLN,mCF8gBA,CDvVM,WGvLN,mCFkhBA,CD3VM,WGvLN,mCFshBA,CD/VM,WGvLN,mCF0hBA,CDnWM,WGvLN,mCF8hBA,CDvWM,WGvLN,mCFkiBA,CACF,CCpgBI,0BFgIE,UACE,aACA,YACA,cCuYN,CDrYI,eACE,cACA,WACA,cCwYN,CDpYM,YAMI,qCACA,mCCoYV,CD3YM,wBAII,YACA,aC6YV,CDlZM,YAMI,2CACA,yCC2YV,CDlZM,YAMI,4CACA,0CCkZV,CDzZM,wBAII,YACA,aC2ZV,CDhaM,YAMI,sCACA,oCCyZV,CDhaM,YAMI,4CACA,0CCgaV,CDvaM,wBAII,YACA,aCyaV,CD9aM,YAMI,4CACA,0CCuaV,CD9aM,YAMI,sCACA,oCC8aV,CDrbM,wBAII,YACA,aCubV,CD5bM,YAMI,4CACA,0CCqbV,CD5bM,YAMI,4CACA,0CC4bV,CDncM,wBAII,YACA,aCqcV,CD1cM,YAMI,sCACA,oCCmcV,CD1cM,aAII,YACA,cACA,4CACA,0CC0cV,CDjdM,aAII,YACA,cACA,4CACA,0CCidV,CDxdM,aAEI,aC0dV,CDhdM,YGvLN,mCF2oBA,CDpdM,YGvLN,mCF+oBA,CDxdM,YGvLN,mCFmpBA,CD5dM,YGvLN,mCFupBA,CDheM,YGvLN,mCF2pBA,CDpeM,YGvLN,mCF+pBA,CDxeM,YGvLN,mCFmqBA,CACF,CDleE,WACE,cCoeJ,CDreE,WACE,cCweJ,CDzeE,WACE,cC4eJ,CD7eE,WACE,cCgfJ,CDjfE,WACE,cCofJ,CDrfE,WACE,cCwfJ,CDzfE,WACE,cC4fJ,CDvfA,MACE,aACA,kBC2fF,CDzfE,yBACE,uCAEE,eACA,UACA,QC2fJ,CACF,C","file":"public/css/buildamic.css","sourcesContent":["// // .container {\n// //   width: 90%;\n// //   margin-right: auto;\n// //   margin-left: auto;\n// //   @include media-breakpoint-up(md) {\n// //     padding-left: 15px;\n// //     padding-right: 15px;\n// //   }\n// //   @include media-breakpoint-up(xl) {\n// //     max-width: $containerWidth;\n// //   }\n// // }\n\n// // .container-small {\n// //   display: flex;\n// //   justify-content: center;\n// //   > .container,\n// //   > .buildamic-row {\n// //     @include media-breakpoint-up(xl) {\n// //       max-width: 75rem;\n// //     }\n// //   }\n// // }\n\n// @media (min-width: 2000px) {\n//   //   .container {\n//   //     max-width: $containerWidth;\n//   //   }\n// }\n// // .container-fluid {\n// //   width: 100%;\n// //   padding-right: 15px;\n// //   padding-left: 15px;\n// //   margin-right: auto;\n// //   margin-left: auto;\n// // }\n// .buildamic-row {\n//   display: block;\n//   margin: 0;\n// }\n// .buildamic-section > .container .buildamic-row {\n//   display: flex;\n//   margin: 0 calc(var(--col-gap) * -1);\n//   flex-wrap: wrap;\n// }\n// .no-gutters {\n//   margin-right: 0;\n//   margin-left: 0;\n// }\n// .no-gutters > .col,\n// .no-gutters > [class*=\"col-\"] {\n//   padding-right: 0;\n//   padding-left: 0;\n// }\n\n// .col {\n//   width: 100%;\n// }\n\n// @each $name, $breakpoint in $grid-breakpoints {\n//   // Don't generate XS, instead have no prefix eg .mb-2\n//   @if $name == xs {\n//     .col {\n//       flex-basis: 0;\n//       flex-grow: 1;\n//       max-width: 100%;\n//     }\n//     .col-auto {\n//       flex: 0 0 auto;\n//       width: auto;\n//       max-width: 100%;\n//     }\n//     @for $i from 0 through 12 {\n//       .col-#{$i} {\n//         @if $i == 12 {\n//           flex: 0 0 100%;\n//         } @else {\n//           flex-grow: 0;\n//           flex-shrink: 0;\n//           flex-basis: calc(((#{$i} / 12 * 100) * 1%));\n//           max-width: calc(((#{$i} / 12 * 100) * 1%));\n//           padding: 0 var(--col-gap);\n//         }\n//       }\n//     }\n//   } @else {\n//     @include media-breakpoint-up($name) {\n//       .#{$name}\\:col {\n//         flex-basis: 0;\n//         flex-grow: 1;\n//         max-width: 100%;\n//       }\n//       .#{$name}\\:col-auto {\n//         flex: 0 0 auto;\n//         width: auto;\n//         max-width: 100%;\n//       }\n//       @for $i from 0 through 12 {\n//         // Breakpoint sizes\n//         .#{$name}\\:col-#{$i} {\n//           @if $i == 12 {\n//             flex: 0 0 100%;\n//           } @else {\n//             flex-grow: 0;\n//             flex-shrink: 0;\n//             flex-basis: calc(((#{$i} / 12 * 100) * 1%));\n//             max-width: calc(((#{$i} / 12 * 100) * 1%));\n//             padding: 0 var(--col-gap);\n//           }\n//         }\n//       }\n//     }\n//   }\n// }\n\n.container {\n  width: 90%;\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 2rem;\n  padding-right: 2rem;\n  @include media-breakpoint-up(lg) {\n    padding-left: 0;\n    padding-right: 0;\n  }\n  @include media-breakpoint-up(xl) {\n    max-width: $containerWidth;\n  }\n}\n\n@media (min-width: 2000px) {\n  .container {\n    max-width: $containerWidth;\n  }\n}\n.buildamic-section {\n  padding: 1rem 0;\n  @include media-breakpoint-up(md) {\n    padding: 3rem 0;\n  }\n}\n.buildamic-row {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  padding: 1rem 0;\n  @include media-breakpoint-up(md) {\n    padding: 2rem 0;\n  }\n}\n\n.buildamic-column,\n.buildamic-field {\n  padding: 1rem 0;\n  &:first-of-type {\n    padding-top: 0;\n  }\n  &:last-of-type {\n    padding-bottom: 0;\n  }\n}\n\n.buildamic-column {\n  @include media-breakpoint-up(md) {\n    padding: 0;\n  }\n}\n\n.no-gutters {\n  margin-right: 0;\n  margin-left: 0;\n}\n.no-gutters > .col,\n.no-gutters > [class*=\"col-\"] {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.buildamic-column {\n  width: 100%;\n}\n\n@each $name, $breakpoint in $grid-breakpoints {\n  // Don't generate XS, instead have no prefix eg .mb-2\n  @if $name == xs {\n    .buildamic-column {\n      flex-basis: 0;\n      flex-grow: 1;\n      max-width: 100%;\n    }\n    .col-auto {\n      flex: 0 0 auto;\n      width: auto;\n      max-width: 100%;\n    }\n    @for $i from 0 through 12 {\n      .col-#{$i} {\n        @if $i == 12 {\n          flex: 0 0 100%;\n          max-width: 100%;\n        } @else {\n          flex-grow: 0;\n          flex-shrink: 0;\n          flex-basis: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));\n          max-width: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));\n        }\n      }\n    }\n    @for $i from 0 through 6 {\n      .grid-#{$i} {\n        @include grid-cols(#{$i});\n      }\n    }\n  } @else {\n    @include media-breakpoint-up($name) {\n      .#{$name}\\:col {\n        flex-basis: 0;\n        flex-grow: 1;\n        max-width: 100%;\n      }\n      .#{$name}\\:col-auto {\n        flex: 0 0 auto;\n        width: auto;\n        max-width: 100%;\n      }\n      @for $i from 0 through 12 {\n        // Breakpoint sizes\n        .#{$name}\\:col-#{$i} {\n          @if $i == 12 {\n            flex: 0 0 100%;\n          } @else {\n            flex-grow: 0;\n            flex-shrink: 0;\n            flex-basis: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));\n            max-width: calc(((#{$i} / 12 * 100) * 1%) - var(--col-gap));\n          }\n        }\n      }\n      @for $i from 0 through 6 {\n        .grid-#{$name}-#{$i} {\n          @include grid-cols(#{$i});\n        }\n      }\n    }\n  }\n}\n\n// Different col-gap utils\n@for $i from 0 through 6 {\n  // Breakpoint sizes\n  .col-gap-#{$i} {\n    --col-gap: #{$i}rem;\n  }\n}\n\n/* CSS GRID STUFF --- POSSIBLY DELETING THIS SOON */\n.grid {\n  display: grid;\n  gap: var(--col-gap);\n  // IE FIX: Remove max-widths required for flexbox on columns\n  @supports (display: grid) {\n    .bmcb-column,\n    [class*=\"col-\"] {\n      max-width: none;\n      padding: 0;\n      margin: 0;\n    }\n  }\n}\n","/*--------------------------------------------------------------\n# Functions, Variables, Mixins: (these should always come first)\n--------------------------------------------------------------*/\n@import \"mixins/mixins-master\";\n@import \"vendor/rfs\";\n\n/*--------------------------------------------------------------\n# Buildy: (All buildy defaults)\n--------------------------------------------------------------*/\n@import \"buildy/buildy\";\n","$containerWidth: 1280px;\n\n$grid-breakpoints: (\n  sm: 640px,\n  md: 768px,\n  lg: 1024px,\n  xl: $containerWidth,\n  xxl: 1536px,\n) !default;\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if(\n    $n < length($breakpoint-names),\n    nth($breakpoint-names, $n + 1),\n    null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @if $name and not $min {\n    $min: $name;\n  }\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @if $name and not $max {\n    $max: $name;\n  }\n  @return if($max and $max > 0, $max - 0.02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"#{$name}\\\\:\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between(\n  $lower,\n  $upper,\n  $breakpoints: $grid-breakpoints\n) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max(breakpoint-next($name, $breakpoints));\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@use \"sass:math\";\n// Button sizes\n@mixin button-size($padding-y, $padding-x, $font-size) {\n  padding: $padding-y $padding-x;\n  font-size: $font-size;\n  &:hover {\n    padding: $padding-y $padding-x;\n  }\n}\n\n@mixin fontSize($size, $min: 14) {\n  $smallSize: $min;\n\n  // If a size less than default min is passed, use that as the new min\n  @if $size < $min {\n    $smallSize: $size;\n  } @else {\n    // Oterhwise calculate a 40% reduction (typically a good size down to mobile).\n    $smallSize: ($size - ($size * 0.4));\n\n    // If it's smaller than either 14px or the min we passed in explicitly, use min\n    @if $smallSize < $min {\n      $smallSize: $min;\n    }\n  }\n\n  // Fallback\n  font-size: ($size * 1px);\n\n  $clampMin: math.div($smallSize, 10) * 1rem;\n  $clampMed: math.div($size, 10) * 1vw;\n  $clampMax: math.div($size, 10) * 1rem;\n\n  font-size: clamp(#{$clampMin}, #{$clampMed}, #{$clampMax});\n}\n\n// Clearfix\n@mixin clearfix() {\n  content: \"\";\n  display: table;\n  table-layout: fixed;\n}\n\n// Clear after (not all clearfix need this also)\n@mixin clearfix-after() {\n  clear: both;\n}\n\n// Column width with margin\n@mixin column-width($numberColumns: 3) {\n  width: map-get($columns, $numberColumns) -\n    (($columns__margin * ($numberColumns - 1)) / $numberColumns);\n}\n\n// Equal-Width grid-column generator\n@mixin grid-cols($numberColumns: 6) {\n  grid-template-columns: repeat($numberColumns, 1fr);\n}\n\n@import \"breakpoints\";\n@import \"utilities\";\n"],"sourceRoot":""}