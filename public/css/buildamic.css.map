{"version":3,"sources":["webpack:///./buildy/_grid.scss","webpack:///./buildamic.scss","webpack:///./mixins/_breakpoints.scss"],"names":[],"mappings":"AAAA,WACE,UACA,kBACA,iBACA,kBACA,kBCUF,CCyEI,0BFxFJ,WAOI,eACA,eCYF,CACF,CCmEI,0BFxFJ,WAWI,gBCcF,CACF,CDXA,0BACE,WACE,gBCcF,CACF,CDZA,mBACE,cCcF,CCqDI,yBFpEJ,mBAGI,cCgBF,CACF,CDdA,eACE,eACA,aACA,wBACA,qDCiBF,CCyCI,yBF9DJ,eAMI,eACA,uBCmBF,CACF,CDhBA,iBACE,cCmBF,CDlBE,+BACE,aCoBJ,CDlBE,8BACE,gBCoBJ,CDhBA,8BACE,eCmBF,CCqBI,yBFrCJ,kBAEI,SCmBF,CACF,CDhBA,YACE,eACA,aCmBF,CDjBA,2CAEE,gBACA,cCoBF,CDjBA,kBACE,UCoBF,CDbM,QAEI,wBCeV,CCJI,yBFJI,YAEI,wBCWV,CACF,CCVI,yBFJI,YAEI,wBCgBV,CACF,CCfI,0BFJI,YAEI,wBCqBV,CACF,CCpBI,0BFJI,YAEI,wBC0BV,CACF,CCzBI,0BFJI,aAEI,wBC+BV,CACF,CDxBA,MACE,uBC0BF,C","file":"public/css/buildamic.css","sourcesContent":[".container {\n  width: 90%;\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 2rem;\n  padding-right: 2rem;\n  @include media-breakpoint-up(lg) {\n    padding-left: 0;\n    padding-right: 0;\n  }\n  @include media-breakpoint-up(xl) {\n    max-width: $containerWidth;\n  }\n}\n\n@media (min-width: 2000px) {\n  .container {\n    max-width: $containerWidth;\n  }\n}\n.buildamic-section {\n  padding: 1rem 0;\n  @include media-breakpoint-up(md) {\n    padding: 3rem 0;\n  }\n}\n.buildamic-row {\n  padding: 1rem 0;\n  display: grid;\n  gap: var(--col-gap, 1rem);\n  grid-template-columns: repeat(var(--b-columns, 12), 1fr);\n  @include media-breakpoint-up(md) {\n    padding: 2rem 0;\n    gap: var(--col-gap, 3rem);\n  }\n}\n\n.buildamic-field {\n  padding: 1rem 0;\n  &:first-of-type {\n    padding-top: 0;\n  }\n  &:last-of-type {\n    padding-bottom: 0;\n  }\n}\n\n.buildamic-field p:last-child {\n  margin-bottom: 0;\n}\n\n.buildamic-column {\n  @include media-breakpoint-up(md) {\n    padding: 0;\n  }\n}\n\n.no-gutters {\n  margin-right: 0;\n  margin-left: 0;\n}\n.no-gutters > .col,\n.no-gutters > [class*=\"col-\"] {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.buildamic-column {\n  width: 100%;\n}\n\n@each $name, $breakpoint in $grid-breakpoints {\n  // Don't generate XS, instead have no prefix eg .mb-2\n  @if $name == xs {\n    @for $i from 0 through 12 {\n      .col-#{$i} {\n        @if $i == 12 {\n          grid-column: auto/span $i;\n        }\n      }\n    }\n  } @else {\n    @include media-breakpoint-up($name) {\n      @for $i from 0 through 12 {\n        .#{$name}\\:col-#{$i} {\n          @if $i == 12 {\n            grid-column: auto/span $i;\n          }\n        }\n      }\n    }\n  }\n}\n\n.grid {\n  gap: var(--col-gap, 1rem);\n}\n","/*--------------------------------------------------------------\n# Functions, Variables, Mixins: (these should always come first)\n--------------------------------------------------------------*/\n@import \"mixins/mixins-master\";\n@import \"vendor/rfs\";\n\n/*--------------------------------------------------------------\n# Buildy: (All buildy defaults)\n--------------------------------------------------------------*/\n@import \"buildy/buildy\";\n","$containerWidth: 1280px;\n\n$grid-breakpoints: (\n  xs: 0,\n  sm: 640px,\n  md: 768px,\n  lg: 1024px,\n  xl: $containerWidth,\n  xxl: 1536px,\n) !default;\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if(\n    $n < length($breakpoint-names),\n    nth($breakpoint-names, $n + 1),\n    null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @if $name and not $min {\n    $min: $name;\n  }\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @if $name and not $max {\n    $max: $name;\n  }\n  @return if($max and $max > 0, $max - 0.02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"#{$name}\\\\:\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between(\n  $lower,\n  $upper,\n  $breakpoints: $grid-breakpoints\n) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max(breakpoint-next($name, $breakpoints));\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"sourceRoot":""}