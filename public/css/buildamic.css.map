{"version":3,"file":"public/css/buildamic.css","mappings":"AAAA,WAGI,iBADA,kBAEA,kBACA,mBAJA,SCcJ,CCyEI,0BFxFJ,WAOQ,eACA,eCYN,CACF,CCmEI,0BFxFJ,WAWQ,gBCcN,CACF,CDXA,0BACI,WACI,gBCcN,CACF,CDZA,mBACI,cCcJ,CCqDI,yBFpEJ,mBAGQ,cCgBN,CACF,CDdA,eAEI,aACA,sBACA,wBAHA,cCoBJ,CCyCI,yBF9DJ,eAMQ,aAIA,gCAHA,sDACA,+CACA,cCoBN,CACF,CCgCI,0BF9DJ,eAaQ,sDCqBN,CACF,CC2BI,0BF9DJ,eAgBQ,wECuBN,CACF,CDjBA,gCAEI,cCoBJ,CDnBI,4DACI,aCsBR,CDpBI,0DACI,gBCuBR,CDnBA,8BACI,eCsBJ,CCKI,yBFxBJ,kBAEQ,SCsBN,CACF,CDfY,OACI,uBCkBhB,CDnBY,OACI,uBCsBhB,CDvBY,OACI,uBC0BhB,CD3BY,OACI,uBC8BhB,CD/BY,OACI,uBCkChB,CDnCY,OACI,uBCsChB,CDvCY,OACI,uBC0ChB,CD3CY,OACI,uBC8ChB,CD/CY,OACI,uBCkDhB,CDnDY,OACI,uBCsDhB,CDvDY,QACI,wBC0DhB,CD3DY,QACI,wBC8DhB,CD/DY,QACI,wBCkEhB,CCrDI,yBFPY,WACI,uBCgElB,CDjEc,WACI,uBCoElB,CDrEc,WACI,uBCwElB,CDzEc,WACI,uBC4ElB,CD7Ec,WACI,uBCgFlB,CDjFc,WACI,uBCoFlB,CDrFc,WACI,uBCwFlB,CDzFc,WACI,uBC4FlB,CD7Fc,WACI,uBCgGlB,CDjGc,WACI,uBCoGlB,CDrGc,YACI,wBCwGlB,CDzGc,YACI,wBC4GlB,CD7Gc,YACI,wBCgHlB,CACF,CC3GI,yBFPY,WACI,uBCqHlB,CDtHc,WACI,uBCyHlB,CD1Hc,WACI,uBC6HlB,CD9Hc,WACI,uBCiIlB,CDlIc,WACI,uBCqIlB,CDtIc,WACI,uBCyIlB,CD1Ic,WACI,uBC6IlB,CD9Ic,WACI,uBCiJlB,CDlJc,WACI,uBCqJlB,CDtJc,WACI,uBCyJlB,CD1Jc,YACI,wBC6JlB,CD9Jc,YACI,wBCiKlB,CDlKc,YACI,wBCqKlB,CACF,CChKI,0BFPY,WACI,uBC0KlB,CD3Kc,WACI,uBC8KlB,CD/Kc,WACI,uBCkLlB,CDnLc,WACI,uBCsLlB,CDvLc,WACI,uBC0LlB,CD3Lc,WACI,uBC8LlB,CD/Lc,WACI,uBCkMlB,CDnMc,WACI,uBCsMlB,CDvMc,WACI,uBC0MlB,CD3Mc,WACI,uBC8MlB,CD/Mc,YACI,wBCkNlB,CDnNc,YACI,wBCsNlB,CDvNc,YACI,wBC0NlB,CACF,CCrNI,0BFPY,WACI,uBC+NlB,CDhOc,WACI,uBCmOlB,CDpOc,WACI,uBCuOlB,CDxOc,WACI,uBC2OlB,CD5Oc,WACI,uBC+OlB,CDhPc,WACI,uBCmPlB,CDpPc,WACI,uBCuPlB,CDxPc,WACI,uBC2PlB,CD5Pc,WACI,uBC+PlB,CDhQc,WACI,uBCmQlB,CDpQc,YACI,wBCuQlB,CDxQc,YACI,wBC2QlB,CD5Qc,YACI,wBC+QlB,CACF,CC1QI,0BFPY,YACI,uBCoRlB,CDrRc,YACI,uBCwRlB,CDzRc,YACI,uBC4RlB,CD7Rc,YACI,uBCgSlB,CDjSc,YACI,uBCoSlB,CDrSc,YACI,uBCwSlB,CDzSc,YACI,uBC4SlB,CD7Sc,YACI,uBCgTlB,CDjTc,YACI,uBCoTlB,CDrTc,YACI,uBCwTlB,CDzTc,aACI,wBC4TlB,CD7Tc,aACI,wBCgUlB,CDjUc,aACI,wBCoUlB,CACF,CD9TA,MACI,uBCgUJ,C","sources":["webpack:///./resources/sass/buildy/_grid.scss","webpack:///./resources/sass/buildamic.scss","webpack:///./resources/sass/mixins/_breakpoints.scss"],"sourcesContent":[".container {\n    width: 90%;\n    margin-right: auto;\n    margin-left: auto;\n    padding-left: 2rem;\n    padding-right: 2rem;\n    @include media-breakpoint-up(lg) {\n        padding-left: 0;\n        padding-right: 0;\n    }\n    @include media-breakpoint-up(xl) {\n        max-width: $containerWidth;\n    }\n}\n\n@media (min-width: 2000px) {\n    .container {\n        max-width: $containerWidth;\n    }\n}\n.buildamic-section {\n    padding: 1rem 0;\n    @include media-breakpoint-up(md) {\n        padding: 3rem 0;\n    }\n}\n.buildamic-row {\n    padding: 1rem 0;\n    display: flex;\n    flex-direction: column;\n    gap: var(--col-gap, 3rem);\n    @include media-breakpoint-up(md) {\n        display: grid;\n        grid-template-columns: repeat(var(--b-columns, 12), 1fr);\n        grid-template-rows: repeat(var(--b-rows, 1), 1fr);\n        padding: 2rem 0;\n        gap: var(--col-gap-md, --col-gap);\n    }\n    @include media-breakpoint-up(lg) {\n        gap: var(--col-gap-lg, var(--col-gap-md, var(--col-gap)));\n    }\n    @include media-breakpoint-up(xl) {\n        gap: var(\n            --col-gap-xl,\n            var(--col-gap-lg, var(--col-gap-md, var(--col-gap)))\n        );\n    }\n}\n\n.buildamic-field,\n.buildamic-set {\n    padding: 1rem 0;\n    &:first-of-type {\n        padding-top: 0;\n    }\n    &:last-of-type {\n        padding-bottom: 0;\n    }\n}\n\n.buildamic-field p:last-child {\n    margin-bottom: 0;\n}\n\n.buildamic-column {\n    @include media-breakpoint-up(md) {\n        padding: 0;\n    }\n}\n\n@each $name, $breakpoint in $grid-breakpoints {\n    // Don't generate XS, instead have no prefix eg .mb-2\n    @if $name == xs {\n        @for $i from 0 through 12 {\n            .col-#{$i} {\n                grid-column: auto/span $i;\n            }\n        }\n    } @else {\n        @include media-breakpoint-up($name) {\n            @for $i from 0 through 12 {\n                .#{$name}\\:col-#{$i} {\n                    grid-column: auto/span $i;\n                }\n            }\n        }\n    }\n}\n\n.grid {\n    gap: var(--col-gap, 1rem);\n}\n","/*--------------------------------------------------------------\n# Functions, Variables, Mixins: (these should always come first)\n--------------------------------------------------------------*/\n@import \"mixins/mixins-master\";\n@import \"vendor/rfs\";\n\n/*--------------------------------------------------------------\n# Buildy: (All buildy defaults)\n--------------------------------------------------------------*/\n@import \"buildy/buildy\";\n","$containerWidth: 1280px;\n\n$grid-breakpoints: (\n  xs: 0,\n  sm: 640px,\n  md: 768px,\n  lg: 1024px,\n  xl: $containerWidth,\n  xxl: 1536px,\n) !default;\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if(\n    $n < length($breakpoint-names),\n    nth($breakpoint-names, $n + 1),\n    null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @if $name and not $min {\n    $min: $name;\n  }\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @if $name and not $max {\n    $max: $name;\n  }\n  @return if($max and $max > 0, $max - 0.02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"#{$name}\\\\:\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between(\n  $lower,\n  $upper,\n  $breakpoints: $grid-breakpoints\n) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max(breakpoint-next($name, $breakpoints));\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}